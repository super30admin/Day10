// Time Complexity :O(m*n)
// Space Complexity :O(m*n)
// Did this code successfully run on Leetcode :yes
// Three line explanation of solution in plain english

// Your code here along with comments explaining your approach

class Solution {
    public int[] findDiagonalOrder(int[][] mat) 
    {
        int m = mat.length;
        int n = mat[0].length;
        int flag = 1;
        int result[] = new int[m*n];
        int r = 0;
        int c = 0;
        for(int i=0; i< m*n; i++)
        {
            result[i] = mat[r][c];
            if(flag == 1)
            {
                if(r==0 && c != n-1)
                {
                    c++;
                    flag = 0;
                }
                else if(c == n-1)
                {
                    r++;
                    flag = 0;
                }
                else
                {
                    r--;
                    c++;
                }
            }
            else
            {
                if(c==0 && r!=m-1)
                {
                    r++;
                    flag = 1;
                }
                else if(r==m-1)
                {
                    c++;
                    flag = 1;
                }
                else
                {
                    r++;
                    c--;
                }
            }
        }
        return result;
    }
}